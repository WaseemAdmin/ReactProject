import ChildReadData from "./ChildReadData";
import { useEffect, useState } from "react";
import axios from 'axios';

const Usersurl = 'https://jsonplaceholder.typicode.com/users';
var i=11;

const ParentReadData = () =>
{
    const [users,setUsers] = useState([]); // empty array
    const [searchText, setSearchText] = useState('');
    const [addUserDiv,setAddUserDiv] = useState(false);

    const filteredUsers = users.filter(user => {
        const search = searchText.toLowerCase();
        return (
          user.name.toLowerCase().includes(search) || user.email.toLowerCase().includes(search)
        );
      });


    const addUserWithoutTodos = async () =>
    {
        const newUser = 
        {
            name: 'New User',
            email: 'newuser@example.com',
            username: 'newuser',
            address: 
            {
                street: "Kulas Light",
                city: "Gwenborough",
                zipcode: "92998-3874",
            }
        }
        
        try 
        {
            const response = await fetch(Usersurl, 
            {
                method: 'POST',
                body: JSON.stringify(newUser),
                headers: 
                {
                    'Content-type': 'application/json',
                },
            });

        const data = await response.json();
        setUsers(prevUsers => [...prevUsers, data]);
        } 
        catch (error) 
        {
            console.error('Error adding user:', error);
        }
    };

    useEffect(() =>{

        const getallUsers = async () =>
        {
            const {data} = await axios.get(Usersurl);
            setUsers(data);
        }
       getallUsers();

    },[])


    const deleteUser = (userId) => {
        setUsers(prevUsers => prevUsers.filter(user => user.id !== userId));
      };

    
    const updateUser = (userId, updatedName, updatedEmail) => 
    {
        setUsers(prevUsers => prevUsers.map(user => 
            {
                if (user.id === userId) {
                    return { ...user, name: updatedName, email: updatedEmail };
                }
                return user;
            })
        );
    };
   

    return(
        <>
        
        Search <input type="text" value={searchText} onChange={event => setSearchText(event.target.value)}/> <button className="addBut" onClick={()=>setAddUserDiv(true)}>Add</button><br/>

        {addUserDiv&&(
            <>
            <label className="UserAddLabel"><b>Add New User</b></label> 
            <div className="addUser-div">
                <b>Name : </b> <input type="text" /> <br/>
                <b>Email : </b> <input type="text" />  <br/><br/>
                <button className="cancelBut" onClick={()=>setAddUserDiv(false)}>Cancel</button>  <button className="addBut">Add</button>

            </div>
            </>
        )}



        <div>
            <button onClick={addUserWithoutTodos}>Add User Without Todos</button>

            {
                filteredUsers.map((user)=>{
                    return<ChildReadData
                              callback={deleteUser} 
                              updateCallback={updateUser}
                              key={user.id} 
                              id={user.id} 
                              name={user.name} 
                              email={user.email} 
                              street={user.address.street} 
                              city={user.address.city} 
                              zipCode={user.address.zipcode}/>;
                })
            }
        </div>
        
        </>
    )
}

export default ParentReadData;